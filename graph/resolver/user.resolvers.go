package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"

	"github.com/golang-graphql/graph"
	"github.com/golang-graphql/graph/model"
	"github.com/golang-graphql/handler"
)

// CreateUser is the resolver for the CreateUser field.
func (r *userMutationResolver) CreateUser(ctx context.Context, obj *model.AbstracModel, param *model.SignInParams) (*model.MainResponse, error) {
	// panic(fmt.Errorf("not implemented: CreateUser - CreateUser"))
	res, err := handler.GetUsecase().CreateUser(ctx, param)
	if err != nil {
		return nil, err
	}
	return res, nil
}

// GetUser is the resolver for the GetUser field.
func (r *userQueryResolver) GetUser(ctx context.Context, obj *model.AbstracModel, id int) (*model.MainResponse, error) {
	// panic(fmt.Errorf("not implemented: GetUser - GetUser"))
	res, err := handler.GetUsecase().GetDetailUser(ctx, int32(id))
	if err != nil {
		return nil, err
	}
	return res, nil
}

// UserMutation returns graph.UserMutationResolver implementation.
func (r *Resolver) UserMutation() graph.UserMutationResolver { return &userMutationResolver{r} }

// UserQuery returns graph.UserQueryResolver implementation.
func (r *Resolver) UserQuery() graph.UserQueryResolver { return &userQueryResolver{r} }

type userMutationResolver struct{ *Resolver }
type userQueryResolver struct{ *Resolver }
